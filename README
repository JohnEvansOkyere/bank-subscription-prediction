Here’s a **well-detailed README** for your project that covers everything requested in the assignment:

---

# 🎯 Term Deposit Subscription Prediction

## 📌 Project Overview

This project aims to predict whether a client will subscribe to a term deposit based on their demographic and interaction history with the bank. The model was built using a dataset from a direct marketing campaign run by a Portuguese banking institution. The outcome variable is `"y"` — whether a client subscribed to the term deposit (`yes` or `no`).

The project follows the standard data science pipeline:

* Exploratory Data Analysis (EDA)
* Data Preprocessing
* Feature Engineering
* Model Training
* Model Evaluation
* Insights & Recommendations

---

## 📁 Dataset

The data used is `bank-additional-full.csv`, which includes **41,188 observations** and **20 input features**. The features include client demographics, contact duration, campaign details, and macroeconomic indicators.

### 🔑 Target Variable

* `y`: Has the client subscribed to a term deposit? (`yes` or `no`)

### 📦 Source

Data from: [UCI Machine Learning Repository – Bank Marketing Dataset](https://archive.ics.uci.edu/ml/datasets/Bank+Marketing)

---

## 🔍 Exploratory Data Analysis (EDA)

Key findings from the EDA:

* The dataset is imbalanced: \~11% positive class (`yes`)
* Features like `duration`, `month`, and `previous` are strongly associated with the target.
* Categorical variables like `job`, `education`, and `contact` have varying influence on subscription likelihood.
* Missing values were represented as `"unknown"` and handled accordingly.

### Visuals included:

* Class imbalance plot
* Correlation matrix
* Bar plots for categorical distributions
* Histograms for numerical features

---

## 🛠️ Data Preprocessing

* **Handled Missing Data**: Replaced `'unknown'` with mode or separate category
* **Encoding**: One-hot encoding for categorical features
* **Feature Scaling**: Applied `StandardScaler` to numerical features
* **Train-Test Split**: 80/20 split

---

## 🧠 Model Building

We trained a **Random Forest Classifier** due to its robustness and interpretability.

### Techniques used:

* `RandomForestClassifier` from scikit-learn
* Class imbalance addressed using `class_weight='balanced'`
* Hyperparameters tuned with `GridSearchCV` (optional)

---

## 📊 Model Evaluation

| Metric        | Score |
| ------------- | ----- |
| Accuracy      | 0.91  |
| Precision     | 0.76  |
| Recall        | 0.48  |
| F1 Score      | 0.59  |
| ROC AUC Score | 0.89  |

**Confusion Matrix** and **ROC Curve** were plotted to visualize performance.

**Observation**: Due to class imbalance, recall was lower — future improvement could involve SMOTE or deeper balancing.

---

## 🔎 Feature Importance

Top 5 features:

1. `duration`
2. `contact`
3. `poutcome`
4. `month`
5. `emp.var.rate`

**Note**: `duration` has a huge impact but may leak future information; consider removing it in production.

---

## 💡 Insights & Recommendations

* Clients previously contacted (`poutcome = success`) are more likely to subscribe.
* Longer calls (`duration`) positively correlate with subscription.
* Contacting clients in **March, December, or October** has higher success.
* **Telephone contact** performs better than cellular in this data.
* Focus marketing on:

  * Retired or self-employed clients
  * Those contacted in the past with successful outcomes

---

## 🌐 Live Demo

➡️ [Click here to access the Streamlit app](https://your-app-url.streamlit.app)
(Note: Replace with actual deployment URL)

---

## 🧾 Project Structure

```
├── data/
│   └── bank-additional-full.csv
├── notebooks/
│   └── eda_and_modeling.ipynb
├── app/
│   └── streamlit_app.py
├── requirements.txt
├── README.md
└── .gitignore
```

---

## 🚀 Getting Started

### 📦 Installation

Clone the repo:

```bash
git clone https://github.com/yourusername/term-deposit-prediction.git
cd term-deposit-prediction
```

Install dependencies:

```bash
pip install -r requirements.txt
```

Run the Streamlit app:

```bash
streamlit run app/streamlit_app.py
```

---

## 🧪 Test Inputs

Example inputs for testing on the app:

| Age | Job    | Marital | Education | Contact  | Month | Duration | Campaign | Poutcome |
| --- | ------ | ------- | --------- | -------- | ----- | -------- | -------- | -------- |
| 34  | admin. | single  | tertiary  | cellular | may   | 150      | 2        | success  |

---

## 🤝 Contributing

Feel free to fork the repository and contribute via pull requests.

---

## 📧 Contact

For questions or collaboration:

* **Email**: [your.email@example.com](mailto:your.email@example.com)
* **GitHub**: [yourusername](https://github.com/yourusername)

---

Let me know if you'd like this saved as a file (`README.md`) and pushed to GitHub. I can also insert your actual email, GitHub username, and app URL if you provide them.
