
  Bank Subscription Prediction Project 

This project focuses on building a machine learning model to predict whether a customer will subscribe to a term deposit based on data from a direct marketing campaign. The solution integrates advanced data preprocessing, feature engineering, model training, evaluation, and prediction in a production-ready pipeline.




BANK_SUBSCRIPTION/
â”œâ”€â”€ app/
â”‚   â”œâ”€â”€ app.py              # Main Streamlit application file
â”‚   â””â”€â”€ datasets/           # Datasets specifically for the app 
â”œâ”€â”€ notebook/
â”‚   â”œâ”€â”€ datasets/           # Datasets copied/used by notebooks
â”‚   â””â”€â”€ 01_eda.ipynb        # Exploratory Data Analysis Notebook
â”œâ”€â”€ report/
â”‚   â””â”€â”€ subscription_analysis_and_prediction.pdf # Project Report pdf
â”œâ”€â”€ results/
â”‚   â””â”€â”€ confusion_matrix.png # Model evaluation visuals
â”œâ”€â”€ src/                    # Core source code for the project
â”‚   â”œâ”€â”€ data/               # Contains raw and test datasets
â”‚   â”‚   â”œâ”€â”€ bank-full.csv
â”‚   â”‚   â””â”€â”€ bank.csv
â”‚   â”œâ”€â”€ model/              # Stores trained machine learning models
â”‚   â”‚   â””â”€â”€ trained_model.joblib
â”‚   â”œâ”€â”€ prediction.py       # Script for making predictions
â”‚   â”œâ”€â”€ preprocess.py       # Script for data cleaning and preparation
â”‚   â”œâ”€â”€ test.py             # Script for teststing
â”‚   â””â”€â”€ trained.py          # Script for model training
â”œâ”€â”€ venv/                   # Python Virtual Environment (ignored by .gitignore)
â”œâ”€â”€ .gitignore              # Specifies files and folders to be ignored by Git
â”œâ”€â”€ prediction_history.json # Stores historical prediction data
â”œâ”€â”€ README.md               # Project overview and documentation
â””â”€â”€ requirements.txt        # Lists all project dependencies


ðŸ§ª Data Overview
The dataset (bank-full.csv) contains customer demographics and interaction history with the marketing campaign. Key variables include:

age, job, marital, education

balance, housing, loan

campaign, pdays, previous, poutcome

Target: subscription (binary)

ðŸ§° Methodology
1. Feature Engineering (FeatureEngineer)

Derived:

was_contacted: Binary indicator from pdays

engagement_score: Ratio of previous contacts to recency

age_group: Categorized age

Balance_Tier: Categorized balance level

2. Preprocessing Pipeline (get_preprocessor)

Handles:

Missing values (SimpleImputer)

Categorical encoding (OneHotEncoder)

Binary features (yes/no â†’ 1/0)

Standardization for numeric features

3. Model Training (training.py)

Model: RandomForestClassifier (with class weight balancing)

Resampling: SMOTEENN (combined oversampling and undersampling)

Hyperparameter Tuning: GridSearchCV

Scoring Metrics: F1, Recall, Precision

Output: Best model saved as trained_model.joblib

4. Model Evaluation

Final Test Metrics:

F1 Score: âœ… High balance between precision and recall

Recall: âœ… Captures a large portion of positive cases

Precision: âœ… Minimizes false positives

5. Prediction Pipeline (prediction.py)

Accepts new customer data in pandas.DataFrame

Applies saved feature engineering and preprocessing

Outputs prediction (0/1) and probability of subscription

ðŸš€ How to Run

Install dependencies

pip install pandas numpy scikit-learn imbalanced-learn joblib

Train the model

python training.py

Run a prediction

python prediction.py

ðŸ“Œ Notes

The pipeline is built using scikit-learn and imbalanced-learn.

The project is optimized for real-world deployment and extension.


OpenAI's ChatGPT â€” Assisted in designing pipelines and documentation

ðŸ“„ License
This project is open-source and available under the MIT License.